# e를 사용한 지수 표현방법
# 유효숫자e지수 = 유효숫자 * 10의 지수승
# 
a = 1e9 # => 1 * 10의 9제곱
a1 = 75.25e1 # => 752.5

# 2진수에서는 0.9와 같은 실수를 표현할 수 있는 방법이 없다.
# 따라서 소수점 비교가 필요할 경우 round()함수를 사용한다
# 주로 코딩테스트에서는 실수를 비교할 때 소수 다섯째 자리에서 반올림한 결과가 같으면 정답으로 인정해준다.
# round(값, 반올림하고자하는 자리 -1)
b = round(123.45, 4) # 123.45를 소수점 5째 자리에서 반올림한 값을 돌려준다.

# 수 자료형의 연산
# 나누기 연산자(/)를 주의하자. 나눠진 결과를 기본적으로 실수형으로 취급한다.
# 몫만을 얻고자 할 때는 //를 사용한다.

# 리스트 자료형
# C, JAVA의 배열기능을 포함하고 있으며, 내부적으로 연결리스트 자료형을 채택하고 있다.
# 크기가 N인 1차원 리스트를 초기화 하는 경우:
n = 10
c = [0] * n

# 리스트 컴프리헨션
d = [i for i in range(1,20) if i%2 == 0]
d1 = [i*i for i in range(1,10)]
print(d)

# 리스트 컴프리헨션은 2차원 리스트를 초기화 할 때 효과적으로 사용할 수 있다.
# N * M 리스트의 초기화
n = 3
m = 4
d3 = [[0] * m for _ in range(n)] 
print(d3)

# 리스트 관련 메소드
e = [1,2,3,4,5]

e.append(6) # 리스트에 값 추가. O(1)
e.sort() # 오름차순으로 정렬. O(NlogN)
e.sort(reverse = True) # 내림차순으로 정렬 O(Nlog(N))
e.reverse() # 리스트의 원소의 순서를 모두 뒤집는다. O(N)
e.insert(3, 7) # 특정 인덱스 위치에 값 삽입. O(N)                       O(N)의 복잡도를 가지는 메소드는 시간 초과되지 않게 조심!!
e.count(2) # 리스트에서 특정한 값을 가지는 데이터의 개수를 센다. O(N)
e.remove(2) # 리스트에서 특정한 값을 가지는 데이터를 제거하는데, 여러개면 하나만 제거한다. O(N)

# 리스트에서 특정한 값의 원소를 모두 제거하는 방법
remove_set = [2,3]
remove_result = [i for i in e if i not in remove_set]


# 문자형 자료형
# 백슬래시 \ 를 사용하면 내부적으로 따옴표를 사용할 수 있다.
f = 'do you know \"Python\"?'
# 파이썬의 문자열은 내부적으로 리스트와 같이 처리된다. => 문자열 데이터에 대해서도 인덱싱과 슬라이싱을 적용할 수 있다.

# 튜플 자료형
# 튜플은 한 번 선언된 값을 바꿀 수 없다.
# 튜플 자료형은 그래프 알고리즘을 구현할 때 자주 사용된다.
f = (('a',1), ('b',2))

# 사전 자료형
# Key, Value 쌍으로 구성된 자료형
# 파이썬의 사전 자료형은 내부적으로 해시 테이블을 이용하므로 기본적으로 데이터의 검색 및 수정에 있어서 O(1)의 시간에 처리할 수 있다.
g = dict()
g = {'Apple':'사과', 'Banana':'바나나', 'Coconut':'코코넛'}
if 'Apple' in g: # Key가 사전자료형에 있는지를 검사하는 문장
    print("있음")
else:
    print("없음")

g_keys = g.keys()
g_values = g.values()

# 집합 자료형
# 중복을 허용하지 않고, 순서가 없다.
# set 키워드로 생성
s1 = set([1,2,2,3])
# 1,2,3만 출력된다

s2 = set('Hello')
# 'e' 'o' 'h' 'l' 출력
# set은 중복을 허용하지 않고 순서가 없기 때문에 'h' 'e' 'l' 'o' 순서로 출력되지 않는다.
# 따라서 set 자료형에 저장된 값을 인덱싱으로 접근하려면 리스트나 튜플로 변환한 후 해야한다.
print(s2)

s1.add(4) # 1개의 값만 set 자료형에 추가
s1.update([4,5,6]) # 여러개의 값을 set자료형에 추가
s1.remove(2) # 특정 값을 제거한다.


# 교집합, 합집합, 차집합을 구하는 방법
s3 = set([1,2,3,4,5,6])
s4 = set([4,5,6,7,8,9])

s3 & s4 # 교집합
# s3.intersection(s4) 

s3 | s4 # 합집합
# s3.union(s4)

s3 - s4 # 차집합
# s3.difference(s4)
